<?xml version="1.0"?>

<robot name="shanti" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- Define robot constants in meters-->
  <xacro:property name="base_width" value="0.6604" />
  <xacro:property name="base_length" value="0.9144" />
  <xacro:property name="base_height" value="0.635" />
  <xacro:property name="wheel_radius" value="0.1016" />
  <xacro:property name="wheel_width" value="0.0762" />
  <xacro:property name="wheel_ygap" value="0.025" />
  <xacro:property name="wheel_zoff" value="0.3" />
  <xacro:property name="wheel_xoff" value="0.2921" />
  <xacro:property name="caster_xoff" value="0.14" />
  <xacro:property name="lidar_radius" value="0.05" />
  <xacro:property name="lidar_width" value="0.04" />

  <!-- Define inertial property macros  -->
  <xacro:macro name="box_inertia" params="m w h d">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}" />
      <mass value="${m}" />
      <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}"
        iyz="0.0" izz="${(m/12) * (w*w + h*h)}" />
    </inertial>
  </xacro:macro>

  <xacro:macro name="cylinder_inertia" params="m r h">
    <inertial>
      <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
      <mass value="${m}" />
      <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy="0" ixz="0" iyy="${(m/12) * (3*r*r + h*h)}"
        iyz="0" izz="${(m/2) * (r*r)}" />
    </inertial>
  </xacro:macro>

  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}" />
      <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0"
        izz="${(2/5) * m * (r*r)}" />
    </inertial>
  </xacro:macro>
  

  <!-- Robot Base -->
  <link name="base_link">
  </link>

  <!-- Robot Footprint -->
  <link name="base_footprint">
    <visual>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}" />
      </geometry>
      <material name="Cyan">
        <color rgba="0 1.0 1.0 1.0" />
      </material>
    </visual>
    <collision>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}" />
      </geometry>
    </collision>

    <xacro:box_inertia m="0.1" w="${base_width}" d="${base_length}" h="${base_height}" />
  </link>
  <joint name="base_joint" type="fixed">
    <parent link="base_link" />
    <child link="base_footprint" />
    <origin xyz="0.0 0.0 ${(wheel_radius+wheel_zoff)}" rpy="0 0 0" />
  </joint>

  <!-- Wheels -->
  <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
    <link name="${prefix}_link">
      <visual>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}" />
        </geometry>
        <material name="Gray">
          <color rgba="0.5 0.5 0.5 1.0" />
        </material>
      </visual>
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <geometry>
          <cylinder radius="${wheel_radius}" length="${wheel_width}" />
        </geometry>
      </collision>

      <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}" />
    </link>

    <joint name="${prefix}_joint" type="continuous">
      <parent link="base_footprint" />
      <child link="${prefix}_link" />
      <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}"
        rpy="0 0 0" />
      <axis xyz="0 1 0" />
    </joint>
  </xacro:macro>

  <xacro:wheel prefix="drivewhl_l1" x_reflect="-1" y_reflect="1"/>
  <xacro:wheel prefix="drivewhl_l2" x_reflect="0" y_reflect="1" />
  <xacro:wheel prefix="drivewhl_l3" x_reflect="1" y_reflect="1" />
  <xacro:wheel prefix="drivewhl_r1" x_reflect="-1" y_reflect="-1" />
  <xacro:wheel prefix="drivewhl_r2" x_reflect="0" y_reflect="-1" />
  <xacro:wheel prefix="drivewhl_r3" x_reflect="1" y_reflect="-1" />


  <!-- IMU Sensor -->
  <link name="imu_link">
    <visual>
      <geometry>
        <box size="0.1 0.1 0.1" />
      </geometry>
    </visual>

    <collision>
      <geometry>
        <box size="0.1 0.1 0.1" />
      </geometry>
    </collision>

    <xacro:box_inertia m="0.1" w="0.1" d="0.1" h="0.1" />
  </link>

  <joint name="imu_joint" type="fixed">
    <parent link="base_footprint" />
    <child link="imu_link" />
    <origin xyz="0 0 0.01" />
  </joint>
  
<!-- GPS Sensor -->
<gazebo reference="gps_link">
  <sensor name="shanti_gps" type="gps">
    <always_on>true</always_on>
    <update_rate>1</update_rate>
    <pose>0 0 0.7 0 0 0</pose>
    <gps>
      <position_sensing>
        <horizontal>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>0.01</stddev>
          </noise>
        </horizontal>
        <vertical>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>0.01</stddev>
          </noise>
        </vertical>
      </position_sensing>
    </gps>
    <plugin name="my_gps_plugin" filename="libgazebo_ros_gps_sensor.so">
      <ros>
        <remapping>~/out:=/gps/fix</remapping>
      </ros>
      <reference_latitude>42.66791</reference_latitude>
      <reference_longitude>-83.21958</reference_longitude>
      <reference_heading>90.0</reference_heading> <!-- Optional -->
      <drift>0.0</drift> <!-- Optional -->

    </plugin>
  </sensor>
</gazebo>


  <!-- Add the gps link so we get a static transform for the GPS -->
  <joint name="gps_joint" type="fixed">
    <parent link="base_footprint"/>
    <child link="gps_link"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint>

  <link name="gps_link"/>

  <!-- Lidar Sensor-->
  <link name="lidar_front_left_link">
  <visual>
    <geometry>
      <cylinder radius="0.04" length="0.1"/>
    </geometry>
    <material name="gray_lidar">
      <color rgba="0.2 0.2 0.2 1.0"/>
    </material>
  </visual>
  <collision>
    <geometry>
      <cylinder radius="0.04" length="0.1"/>
    </geometry>
  </collision>
  <inertial>
    <mass value="0.5"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <inertia 
      ixx="0.001" ixy="0.0" ixz="0.0"
      iyy="0.001" iyz="0.0"
      izz="0.001"/>
  </inertial>
</link>

<joint name="lidar_front_left_joint" type="fixed">
<parent link="base_footprint"/>
  <child link="lidar_front_left_link"/>
  <origin xyz="0.55 0.4 0.5" rpy="0 3.14 0"/>
</joint>

<link name="lidar_back_right_link">
  <visual>
    <geometry>
      <cylinder radius="0.04" length="0.1"/>
    </geometry>
    <material name="gray_lidar">
      <color rgba="0.2 0.2 0.2 1.0"/>
    </material>
  </visual>
  <collision>
    <geometry>
      <cylinder radius="0.04" length="0.1"/>
    </geometry>
  </collision>
  <inertial>
    <mass value="0.5"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
    <inertia 
      ixx="0.001" ixy="0.0" ixz="0.0"
      iyy="0.001" iyz="0.0"
      izz="0.001"/>
  </inertial>
</link>

<joint name="lidar_back_right_joint" type="fixed">
  <parent link="base_footprint"/>
  <child link="lidar_back_right_link"/>
  <origin xyz="-0.55 -0.4 0.5" rpy="0 3.14 0"/> <!-- adjust for your robot -->
</joint>



  <gazebo reference="imu_link">
    <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <ros>
          <namespace>/demo</namespace>
          <remapping>~/out:=imu</remapping>
        </ros>
        <initial_orientation_as_reference>false</initial_orientation_as_reference>
      </plugin>
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <imu>
        <angular_velocity>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>2e-4</stddev>
              <bias_mean>0.0000075</bias_mean>
              <bias_stddev>0.0000008</bias_stddev>
            </noise>
          </z>
        </angular_velocity>
        <linear_acceleration>
          <x>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </x>
          <y>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </y>
          <z>
            <noise type="gaussian">
              <mean>0.0</mean>
              <stddev>1.7e-2</stddev>
              <bias_mean>0.1</bias_mean>
              <bias_stddev>0.001</bias_stddev>
            </noise>
          </z>
        </linear_acceleration>
      </imu>
    </sensor>
  </gazebo>

  <gazebo reference="lidar_front_left_link">
  <sensor type="ray" name="lidar_front_left_sensor">
    <pose>0 0 0 0 0 0</pose>
    <visualize>true</visualize>
    <update_rate>10</update_rate>
    <ray>
      <scan>
        <horizontal>
          <samples>360</samples>
          <resolution>1</resolution>
          <min_angle>-3.14159</min_angle>
          <max_angle>3.14159</max_angle>
        </horizontal>
        <vertical>
          <samples>16</samples>
          <resolution>1</resolution>
          <min_angle>-0.017453</min_angle>
          <max_angle>1.57</max_angle>
        </vertical>
      </scan>
      <range>
        <min>0.1</min>
        <max>10.0</max>
        <resolution>0.01</resolution>
      </range>
      <noise>
        <type>gaussian</type>
        <mean>0.0</mean>
        <stddev>0.01</stddev>
      </noise>
    </ray>
    <plugin name="gazebo_ros_laser_controller_front_left" filename="libgazebo_ros_ray_sensor.so">
      <ros>
        <remapping>scan:=lidar_front_left/scan</remapping>
      </ros>
      <frame_name>lidar_front_left_link</frame_name>
    </plugin>
  </sensor>
</gazebo>

<gazebo reference="lidar_back_right_link">
  <sensor type="ray" name="lidar_back_right_sensor">
    <pose>0 0 0 0 0 0</pose>
    <visualize>true</visualize>
    <update_rate>10</update_rate>
    <ray>
      <scan>
        <horizontal>
          <samples>360</samples>
          <resolution>1</resolution>
          <min_angle>-3.14159</min_angle>
          <max_angle>3.14159</max_angle>
        </horizontal>
        <vertical>
          <samples>16</samples>
          <resolution>1</resolution>
          <min_angle>-0.017453</min_angle>
          <max_angle>1.57</max_angle>
        </vertical>
      </scan>
      <range>
        <min>0.1</min>
        <max>10.0</max>
        <resolution>0.01</resolution>
      </range>
      <noise>
        <type>gaussian</type>
        <mean>0.0</mean>
        <stddev>0.01</stddev>
      </noise>
    </ray>
    <plugin name="gazebo_ros_laser_controller_back_right" filename="libgazebo_ros_ray_sensor.so">
      <ros>
        <namespace>/</namespace>
        <remapping>scan:=lidar_back_right/scan</remapping>
      </ros>
      <frame_name>lidar_back_right_link</frame_name>
    </plugin>
  </sensor>
</gazebo>

<!-- Camera Link -->
<link name="camera_link">
  <visual>
    <geometry>
      <box size="0.1 0.1 0.1" />
    </geometry>
    <material name="Black">
      <color rgba="0.0 0.0 0.0 1.0" />
    </material>
  </visual>
  <collision>
    <geometry>
      <box size="0.1 0.1 0.1" />
    </geometry>
  </collision>
  <inertial>
    <mass value="0.1" />
    <origin xyz="0 0 0" rpy="0 0 0" />
    <inertia
      ixx="0.001" ixy="0.0" ixz="0.0"
      iyy="0.001" iyz="0.0"
      izz="0.001" />
  </inertial>
</link>

<!-- Camera Joint -->
<joint name="camera_joint" type="fixed">
  <parent link="base_footprint" />
  <child link="camera_link" />
  <origin xyz="3.0 0.0 5.0" rpy="0 1.5707  0" />
</joint>

<!-- Gazebo Camera Sensor -->
<gazebo reference="camera_link">
  <sensor type="camera" name="camera_sensor">
    <pose>0 0 0 0 0 0</pose>
    <camera>
      <horizontal_fov>1.047</horizontal_fov>
      <image>
        <width>640</width>
        <height>480</height>
        <format>R8G8B8</format>
      </image>
      <clip>
        <near>0.1</near>
        <far>100</far>
      </clip>
    </camera>
    <plugin name="gazebo_ros_camera" filename="libgazebo_ros_camera.so">
      <ros>
        <namespace>/camera</namespace>
        <remapping>image_raw:=camera/image_raw</remapping>
        <remapping>camera_info:=camera/camera_info</remapping>
      </ros>
      <frame_name>camera_link</frame_name>
    </plugin>
  </sensor>
</gazebo>

  <gazebo>
    <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
      <ros>
        <namespace>/diff_drive/center</namespace>
      </ros>

      <!-- wheels -->
      <left_joint>drivewhl_l2_joint</left_joint>
      <right_joint>drivewhl_r2_joint</right_joint>

      <!-- kinematics -->
      <wheel_separation>0.4</wheel_separation>
      <wheel_diameter>0.2</wheel_diameter>

      <!-- limits -->
      <max_wheel_torque>20</max_wheel_torque>
      <max_wheel_acceleration>1.0</max_wheel_acceleration>

      <!-- output -->
      <publish_odom>true</publish_odom>
      <publish_odom_tf>false</publish_odom_tf>
      <publish_wheel_tf>true</publish_wheel_tf>

      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
      <ros>
        <namespace>/diff_drive/front</namespace>
      </ros>

      <!-- wheels -->
      <left_joint>drivewhl_l1_joint</left_joint>
      <right_joint>drivewhl_r1_joint</right_joint>

      <!-- kinematics -->
      <wheel_separation>0.4</wheel_separation>
      <wheel_diameter>0.2</wheel_diameter>

      <!-- limits -->
      <max_wheel_torque>20</max_wheel_torque>
      <max_wheel_acceleration>1.0</max_wheel_acceleration>

      <!-- output -->
      <publish_odom>true</publish_odom>
      <publish_odom_tf>false</publish_odom_tf>
      <publish_wheel_tf>true</publish_wheel_tf>

      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>
    </plugin>
  </gazebo>
  
  <gazebo>
    <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
      <ros>
        <namespace>/diff_drive/back</namespace>
      </ros>

      <!-- wheels -->
      <left_joint>drivewhl_l3_joint</left_joint>
      <right_joint>drivewhl_r3_joint</right_joint>

      <!-- kinematics -->
      <wheel_separation>0.4</wheel_separation>
      <wheel_diameter>0.2</wheel_diameter>

      <!-- limits -->
      <max_wheel_torque>20</max_wheel_torque>
      <max_wheel_acceleration>1.0</max_wheel_acceleration>

      <!-- output -->
      <publish_odom>true</publish_odom>
      <publish_odom_tf>false</publish_odom_tf>
      <publish_wheel_tf>true</publish_wheel_tf>

      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>
    </plugin>
  </gazebo>

</robot>
